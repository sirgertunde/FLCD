N = program decllist declaration type declarationFollowing stmtlist stmtlistFollowing stmt simplstmt assignstmt assignstmtFollowing expression expressionFollowing term termFollowing iostmt inputstmt inputstmtFollowing printstmt printstmtFollowing structstmt ifstmt ifstmtFollowing whilestmt forstmt forstmtFollowing condition conditionFollowing relation
sigma = int_main_(_)_begin_;_end_IDENTIFIER_boolean_char_string_NUMBER_STRING_[_]_=_+_-_//_/_%_*_(_)_input_print_if_then_else_fi_while_do_done_for_in_range_,_<_<=_==_!=_>=_>_and_or
S = program
P =
    program -> int main ( ) begin decllist stmtlist end
    decllist -> declaration ; decllist
    decllist -> ε
    declaration -> type IDENTIFIER declarationFollowing
    declarationFollowing -> ε
    declarationFollowing -> [ NUMBER ]
    type -> int
    type -> boolean
    type -> string
    type -> char
    stmtlist -> stmt stmtlistFollowing
    stmtlistFollowing -> ε
    stmtlistFollowing -> stmtlist
    stmt -> simplstmt
    stmt -> structstmt
    simplstmt -> assignstmt
    simplstmt -> iostmt
    assignstmt -> term = assignstmtFollowing
    assignstmtFollowing -> expression ;
    assignstmtFollowing -> inputstmt
    expression -> term expressionFollowing
    expressionFollowing -> ε
    expressionFollowing -> % term
    expressionFollowing -> + term
    expressionFollowing -> - term
    expressionFollowing -> // term
    expressionFollowing -> * term
    term -> IDENTIFIER termFollowing
    term -> NUMBER
    termFollowing -> ε
    termFollowing -> [ IDENTIFIER ]
    iostmt -> inputstmt
    iostmt -> printstmt
    inputstmt -> input ( inputstmtFollowing
    inputstmtFollowing -> STRING ) ;
    inputstmtFollowing -> ) ;
    printstmt -> print ( printstmtFollowing ) ;
    printstmtFollowing -> IDENTIFIER
    printstmtFollowing -> STRING
    structstmt -> ifstmt
    structstmt -> whilestmt
    structstmt -> forstmt
    ifstmt -> if condition then stmtlist ifstmtFollowing
    ifstmtFollowing -> fi
    ifstmtFollowing -> else stmtlist fi
    whilestmt -> while condition do stmtlist done
    forstmt -> for IDENTIFIER in range ( expression forstmtFollowing
    forstmtFollowing -> ) do stmtlist done
    forstmtFollowing -> , expression ) do stmtlist done
    condition -> expression relation expression conditionFollowing
    conditionFollowing -> ε
    conditionFollowing -> relation expression relation expression
    relation -> <
    relation -> >
    relation -> <=
    relation -> ==
    relation -> !=
    relation -> >=
    relation -> and
    relation -> or